{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041d\u0438\u043a\u0438\u0444\u043e\u0440\u043e\u0432\u043e\u0439 \u041a\u044e\u043d\u043d\u044d\u0439 \u041a33402","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#33402","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041d\u0438\u043a\u0438\u0444\u043e\u0440\u043e\u0432\u043e\u0439 \u041a\u044e\u043d\u043d\u044d\u0439 \u041a33402"},{"location":"lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break print ( data . decode ()) conn . send ( b 'hello, client!' ) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) sock . send ( b 'hello, server!' ) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break data = data . decode () data = data . split ( ',' ) a = data [ 0 ] b = data [ 1 ] h = data [ 2 ] S = 0.5 * ( int ( a ) + int ( b )) * int ( h ) print ( S ) conn . send ( str ( S ) . encode ()) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) print ( '\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438' ) a = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ' ) b = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ' ) h = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u044b\u0441\u043e\u0442\u044b: ' ) sock . send (( a + ',' + b + ',' + h ) . encode ()) data = sock . recv ( 1024 ) sock . close () print ( '\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u0430: ' , data . decode ()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : fin = open ( 'index.html' ) content = fin . read () fin . close () response = 'HTTP/1.0 200 OK \\n\\n ' + content conn . send ( response . encode ()) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > lol </ title > </ head > < body > < p > hello, world </ p > </ body > </ html > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 server.py import socket import threading sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 10 ) print ( '[ Server Started ]' ) clients = [] def send_messages ( msg , author ): for client in clients : if author != client : client . send ( msg ) def accept_messages ( client ): while True : msg = client . recv ( 1024 ) send_messages ( msg , client ) while True : try : client_socket , address = sock . accept () clients . append ( client_socket ) thread = threading . Thread ( target = accept_messages , args = ( client_socket ,)) thread . start () except KeyboardInterrupt : print ( '[ Server stopped ]' ) break sock . close () client.py import socket import threading sock = socket . socket () sock . connect (( 'localhost' , 9090 )) username = input ( 'Name: ' ) def accept_from_server (): while True : msg = sock . recv ( 1024 ) print ( msg . decode ()) thread = threading . Thread ( target = accept_from_server ) thread . start () while True : try : message = input () sock . sendall (( '[' + username + '] :: ' + message ) . encode ()) except : sock . sendall ( 'Error' . encode ()) print ( 'Error. Disconnected' ) break sock . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 server.py import socket grades = {} class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : serv_sock . bind (( self . host , self . port )) serv_sock . listen () while True : conn , _ = serv_sock . accept () try : self . serve_client ( conn ) except Exception as e : print ( 'Fail' , e ) finally : serv_sock . close () def serve_client ( self , client ): try : req = self . parse_request ( client ) resp = self . handle_request ( req ) self . send_response ( client , resp ) except ConnectionResetError : client = None if client : client . close () def parse_request_line ( self , rfile ): line = rfile . readline () line = line . decode ( 'utf-8' ) return line . split () def parse_request ( self , conn ): rfile = conn . makefile ( 'rb' ) method , target , ver = self . parse_request_line ( rfile ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' values = target . split ( '?' )[ 1 ] . split ( '&' ) for value in values : a , b = value . split ( '=' ) request [ 'data' ][ a ] = b return request def handle_request ( self , req ): if req [ 'method' ] == 'POST' : return self . handle_post ( req ) else : return self . handle_get () def handle_get ( self ): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>Subject</label><input name=\"discipline\" /><br><br><label>Grade</label><input name=\"grade\"/><br><br><input type=\"submit\"></form>' for subject in grades : body += f '<div><span> { subject } : { grades [ subject ] } </span></div>' body += '</div></body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , content_type ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def handle_post ( self , request ): discipline = request [ 'data' ][ 'discipline' ] grade = request [ 'data' ][ 'grade' ] if discipline not in grades : grades [ discipline ] = [] grades [ discipline ] . append ( grade ) return self . handle_get () def send_response ( self , conn , resp ): rfile = conn . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' rfile . write ( status_line . encode ( 'utf-8' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' rfile . write ( header_line . encode ( 'utf-8' )) rfile . write ( b ' \\r\\n ' ) if resp . body : rfile . write ( resp . body ) rfile . flush () rfile . close () class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body if __name__ == '__main__' : serv = MyHTTPServer ( '127.0.0.1' , 9090 ) serv . serve_forever ()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab1/#no1_1","text":"server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break print ( data . decode ()) conn . send ( b 'hello, client!' ) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) sock . send ( b 'hello, server!' ) data = sock . recv ( 1024 ) sock . close () print ( data . decode ())","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab1/#no2","text":"server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break data = data . decode () data = data . split ( ',' ) a = data [ 0 ] b = data [ 1 ] h = data [ 2 ] S = 0.5 * ( int ( a ) + int ( b )) * int ( h ) print ( S ) conn . send ( str ( S ) . encode ()) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) print ( '\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438' ) a = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ' ) b = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ' ) h = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u044b\u0441\u043e\u0442\u044b: ' ) sock . send (( a + ',' + b + ',' + h ) . encode ()) data = sock . recv ( 1024 ) sock . close () print ( '\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u0430: ' , data . decode ())","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab1/#no3","text":"server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : fin = open ( 'index.html' ) content = fin . read () fin . close () response = 'HTTP/1.0 200 OK \\n\\n ' + content conn . send ( response . encode ()) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > lol </ title > </ head > < body > < p > hello, world </ p > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab1/#no4","text":"server.py import socket import threading sock = socket . socket () sock . bind (( 'localhost' , 9090 )) sock . listen ( 10 ) print ( '[ Server Started ]' ) clients = [] def send_messages ( msg , author ): for client in clients : if author != client : client . send ( msg ) def accept_messages ( client ): while True : msg = client . recv ( 1024 ) send_messages ( msg , client ) while True : try : client_socket , address = sock . accept () clients . append ( client_socket ) thread = threading . Thread ( target = accept_messages , args = ( client_socket ,)) thread . start () except KeyboardInterrupt : print ( '[ Server stopped ]' ) break sock . close () client.py import socket import threading sock = socket . socket () sock . connect (( 'localhost' , 9090 )) username = input ( 'Name: ' ) def accept_from_server (): while True : msg = sock . recv ( 1024 ) print ( msg . decode ()) thread = threading . Thread ( target = accept_from_server ) thread . start () while True : try : message = input () sock . sendall (( '[' + username + '] :: ' + message ) . encode ()) except : sock . sendall ( 'Error' . encode ()) print ( 'Error. Disconnected' ) break sock . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab1/#no5","text":"server.py import socket grades = {} class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : serv_sock . bind (( self . host , self . port )) serv_sock . listen () while True : conn , _ = serv_sock . accept () try : self . serve_client ( conn ) except Exception as e : print ( 'Fail' , e ) finally : serv_sock . close () def serve_client ( self , client ): try : req = self . parse_request ( client ) resp = self . handle_request ( req ) self . send_response ( client , resp ) except ConnectionResetError : client = None if client : client . close () def parse_request_line ( self , rfile ): line = rfile . readline () line = line . decode ( 'utf-8' ) return line . split () def parse_request ( self , conn ): rfile = conn . makefile ( 'rb' ) method , target , ver = self . parse_request_line ( rfile ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' values = target . split ( '?' )[ 1 ] . split ( '&' ) for value in values : a , b = value . split ( '=' ) request [ 'data' ][ a ] = b return request def handle_request ( self , req ): if req [ 'method' ] == 'POST' : return self . handle_post ( req ) else : return self . handle_get () def handle_get ( self ): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>Subject</label><input name=\"discipline\" /><br><br><label>Grade</label><input name=\"grade\"/><br><br><input type=\"submit\"></form>' for subject in grades : body += f '<div><span> { subject } : { grades [ subject ] } </span></div>' body += '</div></body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , content_type ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def handle_post ( self , request ): discipline = request [ 'data' ][ 'discipline' ] grade = request [ 'data' ][ 'grade' ] if discipline not in grades : grades [ discipline ] = [] grades [ discipline ] . append ( grade ) return self . handle_get () def send_response ( self , conn , resp ): rfile = conn . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' rfile . write ( status_line . encode ( 'utf-8' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' rfile . write ( header_line . encode ( 'utf-8' )) rfile . write ( b ' \\r\\n ' ) if resp . body : rfile . write ( resp . body ) rfile . flush () rfile . close () class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body if __name__ == '__main__' : serv = MyHTTPServer ( '127.0.0.1' , 9090 ) serv . serve_forever ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"}]}